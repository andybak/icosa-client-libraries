extends Resource
class_name OembedOut

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# OembedOut Model


# Required: True
# isArray: false
# Allowed values: "rich"
@export var type: String:
	set(value):
		if str(value) != "" and not (str(value) in __type__allowable__values):
			push_error("OembedOut: tried to set property `type` to a value that is not allowed." +
				"  Allowed values: `rich`")
			return
		__type__was__set = true
		type = value
var __type__was__set := false
var __type__allowable__values := ["rich"]

# Required: True
# isArray: false
# Allowed values: "1.0"
@export var version: String:
	set(value):
		if str(value) != "" and not (str(value) in __version__allowable__values):
			push_error("OembedOut: tried to set property `version` to a value that is not allowed." +
				"  Allowed values: `1.0`")
			return
		__version__was__set = true
		version = value
var __version__was__set := false
var __version__allowable__values := ["1.0"]

# Required: False
# isArray: false
@export var title: String:
	set(value):
		__title__was__set = true
		title = value
var __title__was__set := false

# Required: False
# isArray: false
@export var authorUnderscorename: String:
	set(value):
		__authorUnderscorename__was__set = true
		authorUnderscorename = value
var __authorUnderscorename__was__set := false

# Required: False
# isArray: false
@export var authorUnderscoreurl: String:
	set(value):
		__authorUnderscoreurl__was__set = true
		authorUnderscoreurl = value
var __authorUnderscoreurl__was__set := false

# Required: False
# isArray: false
@export var providerUnderscorename: String:
	set(value):
		__providerUnderscorename__was__set = true
		providerUnderscorename = value
var __providerUnderscorename__was__set := false

# Required: False
# isArray: false
@export var providerUnderscoreurl: String:
	set(value):
		__providerUnderscoreurl__was__set = true
		providerUnderscoreurl = value
var __providerUnderscoreurl__was__set := false

# Required: False
# isArray: false
@export var cacheUnderscoreage: String:
	set(value):
		__cacheUnderscoreage__was__set = true
		cacheUnderscoreage = value
var __cacheUnderscoreage__was__set := false

# Required: False
# isArray: false
@export var thumbnailUnderscoreurl: String:
	set(value):
		__thumbnailUnderscoreurl__was__set = true
		thumbnailUnderscoreurl = value
var __thumbnailUnderscoreurl__was__set := false

# Required: False
# isArray: false
@export var thumbnailUnderscorewidth: String:
	set(value):
		__thumbnailUnderscorewidth__was__set = true
		thumbnailUnderscorewidth = value
var __thumbnailUnderscorewidth__was__set := false

# Required: False
# isArray: false
@export var thumbnailUnderscoreheight: String:
	set(value):
		__thumbnailUnderscoreheight__was__set = true
		thumbnailUnderscoreheight = value
var __thumbnailUnderscoreheight__was__set := false

# Required: True
# isArray: false
@export var html: String:
	set(value):
		__html__was__set = true
		html = value
var __html__was__set := false

# Required: True
# isArray: false
@export var width: int:
	set(value):
		__width__was__set = true
		width = value
var __width__was__set := false

# Required: True
# isArray: false
@export var height: int:
	set(value):
		__height__was__set = true
		height = value
var __height__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__type__was__set:
		bzz_missing_properties.append("type")
	if not self.__version__was__set:
		bzz_missing_properties.append("version")
	if not self.__html__was__set:
		bzz_missing_properties.append("html")
	if not self.__width__was__set:
		bzz_missing_properties.append("width")
	if not self.__height__was__set:
		bzz_missing_properties.append("height")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__type__was__set:
		bzz_dictionary["type"] = self.type
	if self.__version__was__set:
		bzz_dictionary["version"] = self.version
	if self.__title__was__set:
		bzz_dictionary["title"] = self.title
	if self.__authorUnderscorename__was__set:
		bzz_dictionary["authorUnderscorename"] = self.authorUnderscorename
	if self.__authorUnderscoreurl__was__set:
		bzz_dictionary["authorUnderscoreurl"] = self.authorUnderscoreurl
	if self.__providerUnderscorename__was__set:
		bzz_dictionary["providerUnderscorename"] = self.providerUnderscorename
	if self.__providerUnderscoreurl__was__set:
		bzz_dictionary["providerUnderscoreurl"] = self.providerUnderscoreurl
	if self.__cacheUnderscoreage__was__set:
		bzz_dictionary["cacheUnderscoreage"] = self.cacheUnderscoreage
	if self.__thumbnailUnderscoreurl__was__set:
		bzz_dictionary["thumbnailUnderscoreurl"] = self.thumbnailUnderscoreurl
	if self.__thumbnailUnderscorewidth__was__set:
		bzz_dictionary["thumbnailUnderscorewidth"] = self.thumbnailUnderscorewidth
	if self.__thumbnailUnderscoreheight__was__set:
		bzz_dictionary["thumbnailUnderscoreheight"] = self.thumbnailUnderscoreheight
	if self.__html__was__set:
		bzz_dictionary["html"] = self.html
	if self.__width__was__set:
		bzz_dictionary["width"] = self.width
	if self.__height__was__set:
		bzz_dictionary["height"] = self.height
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("type"):
		me.type = from_dict["type"]
	if from_dict.has("version"):
		me.version = from_dict["version"]
	if from_dict.has("title"):
		me.title = from_dict["title"]
	if from_dict.has("authorUnderscorename"):
		me.authorUnderscorename = from_dict["authorUnderscorename"]
	if from_dict.has("authorUnderscoreurl"):
		me.authorUnderscoreurl = from_dict["authorUnderscoreurl"]
	if from_dict.has("providerUnderscorename"):
		me.providerUnderscorename = from_dict["providerUnderscorename"]
	if from_dict.has("providerUnderscoreurl"):
		me.providerUnderscoreurl = from_dict["providerUnderscoreurl"]
	if from_dict.has("cacheUnderscoreage"):
		me.cacheUnderscoreage = from_dict["cacheUnderscoreage"]
	if from_dict.has("thumbnailUnderscoreurl"):
		me.thumbnailUnderscoreurl = from_dict["thumbnailUnderscoreurl"]
	if from_dict.has("thumbnailUnderscorewidth"):
		me.thumbnailUnderscorewidth = from_dict["thumbnailUnderscorewidth"]
	if from_dict.has("thumbnailUnderscoreheight"):
		me.thumbnailUnderscoreheight = from_dict["thumbnailUnderscoreheight"]
	if from_dict.has("html"):
		me.html = from_dict["html"]
	if from_dict.has("width"):
		me.width = from_dict["width"]
	if from_dict.has("height"):
		me.height = from_dict["height"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

