# coding: utf-8

"""
    NinjaAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OembedOut(BaseModel):
    """
    OembedOut
    """ # noqa: E501
    type: StrictStr
    version: StrictStr
    title: Optional[StrictStr] = None
    author_name: Optional[StrictStr] = None
    author_url: Optional[StrictStr] = None
    provider_name: Optional[StrictStr] = None
    provider_url: Optional[StrictStr] = None
    cache_age: Optional[StrictStr] = None
    thumbnail_url: Optional[StrictStr] = None
    thumbnail_width: Optional[StrictStr] = None
    thumbnail_height: Optional[StrictStr] = None
    html: StrictStr
    width: StrictInt
    height: StrictInt
    __properties: ClassVar[List[str]] = ["type", "version", "title", "author_name", "author_url", "provider_name", "provider_url", "cache_age", "thumbnail_url", "thumbnail_width", "thumbnail_height", "html", "width", "height"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['rich']):
            raise ValueError("must be one of enum values ('rich')")
        return value

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['1.0']):
            raise ValueError("must be one of enum values ('1.0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OembedOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if author_name (nullable) is None
        # and model_fields_set contains the field
        if self.author_name is None and "author_name" in self.model_fields_set:
            _dict['author_name'] = None

        # set to None if author_url (nullable) is None
        # and model_fields_set contains the field
        if self.author_url is None and "author_url" in self.model_fields_set:
            _dict['author_url'] = None

        # set to None if provider_name (nullable) is None
        # and model_fields_set contains the field
        if self.provider_name is None and "provider_name" in self.model_fields_set:
            _dict['provider_name'] = None

        # set to None if provider_url (nullable) is None
        # and model_fields_set contains the field
        if self.provider_url is None and "provider_url" in self.model_fields_set:
            _dict['provider_url'] = None

        # set to None if cache_age (nullable) is None
        # and model_fields_set contains the field
        if self.cache_age is None and "cache_age" in self.model_fields_set:
            _dict['cache_age'] = None

        # set to None if thumbnail_url (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_url is None and "thumbnail_url" in self.model_fields_set:
            _dict['thumbnail_url'] = None

        # set to None if thumbnail_width (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_width is None and "thumbnail_width" in self.model_fields_set:
            _dict['thumbnail_width'] = None

        # set to None if thumbnail_height (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_height is None and "thumbnail_height" in self.model_fields_set:
            _dict['thumbnail_height'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OembedOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "version": obj.get("version"),
            "title": obj.get("title"),
            "author_name": obj.get("author_name"),
            "author_url": obj.get("author_url"),
            "provider_name": obj.get("provider_name"),
            "provider_url": obj.get("provider_url"),
            "cache_age": obj.get("cache_age"),
            "thumbnail_url": obj.get("thumbnail_url"),
            "thumbnail_width": obj.get("thumbnail_width"),
            "thumbnail_height": obj.get("thumbnail_height"),
            "html": obj.get("html"),
            "width": obj.get("width"),
            "height": obj.get("height")
        })
        return _obj


