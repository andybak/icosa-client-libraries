# coding: utf-8

"""
    NinjaAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr
from typing import List, Optional
from openapi_client.models.complexity import Complexity
from openapi_client.models.full_user_schema import FullUserSchema
from openapi_client.models.paged_asset_schema_out import PagedAssetSchemaOut
from openapi_client.models.patch_user_schema import PatchUserSchema

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class UsersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def icosa_api_users_get_me_assets(
        self,
        category: Optional[StrictStr] = None,
        curated: Optional[StrictBool] = None,
        format: Optional[List[StrictStr]] = None,
        keywords: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        tag: Optional[List[StrictStr]] = None,
        order_by: Optional[StrictStr] = None,
        order_by2: Optional[StrictStr] = None,
        max_complexity: Optional[Complexity] = None,
        triangle_count_min: Optional[StrictInt] = None,
        triangle_count_max: Optional[StrictInt] = None,
        visibility: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        page_token2: Optional[StrictStr] = None,
        page_size: Optional[StrictStr] = None,
        page_size2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedAssetSchemaOut:
        """Get Me Assets


        :param category:
        :type category: str
        :param curated:
        :type curated: bool
        :param format:
        :type format: List[str]
        :param keywords:
        :type keywords: str
        :param name:
        :type name: str
        :param description:
        :type description: str
        :param tag:
        :type tag: List[str]
        :param order_by:
        :type order_by: str
        :param order_by2:
        :type order_by2: str
        :param max_complexity:
        :type max_complexity: Complexity
        :param triangle_count_min:
        :type triangle_count_min: int
        :param triangle_count_max:
        :type triangle_count_max: int
        :param visibility:
        :type visibility: str
        :param page_token:
        :type page_token: str
        :param page_token2:
        :type page_token2: str
        :param page_size:
        :type page_size: str
        :param page_size2:
        :type page_size2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_me_assets_serialize(
            category=category,
            curated=curated,
            format=format,
            keywords=keywords,
            name=name,
            description=description,
            tag=tag,
            order_by=order_by,
            order_by2=order_by2,
            max_complexity=max_complexity,
            triangle_count_min=triangle_count_min,
            triangle_count_max=triangle_count_max,
            visibility=visibility,
            page_token=page_token,
            page_token2=page_token2,
            page_size=page_size,
            page_size2=page_size2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedAssetSchemaOut",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def icosa_api_users_get_me_assets_with_http_info(
        self,
        category: Optional[StrictStr] = None,
        curated: Optional[StrictBool] = None,
        format: Optional[List[StrictStr]] = None,
        keywords: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        tag: Optional[List[StrictStr]] = None,
        order_by: Optional[StrictStr] = None,
        order_by2: Optional[StrictStr] = None,
        max_complexity: Optional[Complexity] = None,
        triangle_count_min: Optional[StrictInt] = None,
        triangle_count_max: Optional[StrictInt] = None,
        visibility: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        page_token2: Optional[StrictStr] = None,
        page_size: Optional[StrictStr] = None,
        page_size2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedAssetSchemaOut]:
        """Get Me Assets


        :param category:
        :type category: str
        :param curated:
        :type curated: bool
        :param format:
        :type format: List[str]
        :param keywords:
        :type keywords: str
        :param name:
        :type name: str
        :param description:
        :type description: str
        :param tag:
        :type tag: List[str]
        :param order_by:
        :type order_by: str
        :param order_by2:
        :type order_by2: str
        :param max_complexity:
        :type max_complexity: Complexity
        :param triangle_count_min:
        :type triangle_count_min: int
        :param triangle_count_max:
        :type triangle_count_max: int
        :param visibility:
        :type visibility: str
        :param page_token:
        :type page_token: str
        :param page_token2:
        :type page_token2: str
        :param page_size:
        :type page_size: str
        :param page_size2:
        :type page_size2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_me_assets_serialize(
            category=category,
            curated=curated,
            format=format,
            keywords=keywords,
            name=name,
            description=description,
            tag=tag,
            order_by=order_by,
            order_by2=order_by2,
            max_complexity=max_complexity,
            triangle_count_min=triangle_count_min,
            triangle_count_max=triangle_count_max,
            visibility=visibility,
            page_token=page_token,
            page_token2=page_token2,
            page_size=page_size,
            page_size2=page_size2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedAssetSchemaOut",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def icosa_api_users_get_me_assets_without_preload_content(
        self,
        category: Optional[StrictStr] = None,
        curated: Optional[StrictBool] = None,
        format: Optional[List[StrictStr]] = None,
        keywords: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        tag: Optional[List[StrictStr]] = None,
        order_by: Optional[StrictStr] = None,
        order_by2: Optional[StrictStr] = None,
        max_complexity: Optional[Complexity] = None,
        triangle_count_min: Optional[StrictInt] = None,
        triangle_count_max: Optional[StrictInt] = None,
        visibility: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        page_token2: Optional[StrictStr] = None,
        page_size: Optional[StrictStr] = None,
        page_size2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Me Assets


        :param category:
        :type category: str
        :param curated:
        :type curated: bool
        :param format:
        :type format: List[str]
        :param keywords:
        :type keywords: str
        :param name:
        :type name: str
        :param description:
        :type description: str
        :param tag:
        :type tag: List[str]
        :param order_by:
        :type order_by: str
        :param order_by2:
        :type order_by2: str
        :param max_complexity:
        :type max_complexity: Complexity
        :param triangle_count_min:
        :type triangle_count_min: int
        :param triangle_count_max:
        :type triangle_count_max: int
        :param visibility:
        :type visibility: str
        :param page_token:
        :type page_token: str
        :param page_token2:
        :type page_token2: str
        :param page_size:
        :type page_size: str
        :param page_size2:
        :type page_size2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_me_assets_serialize(
            category=category,
            curated=curated,
            format=format,
            keywords=keywords,
            name=name,
            description=description,
            tag=tag,
            order_by=order_by,
            order_by2=order_by2,
            max_complexity=max_complexity,
            triangle_count_min=triangle_count_min,
            triangle_count_max=triangle_count_max,
            visibility=visibility,
            page_token=page_token,
            page_token2=page_token2,
            page_size=page_size,
            page_size2=page_size2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedAssetSchemaOut",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _icosa_api_users_get_me_assets_serialize(
        self,
        category,
        curated,
        format,
        keywords,
        name,
        description,
        tag,
        order_by,
        order_by2,
        max_complexity,
        triangle_count_min,
        triangle_count_max,
        visibility,
        page_token,
        page_token2,
        page_size,
        page_size2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'format': 'multi',
            'tag': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if category is not None:
            
            _query_params.append(('category', category))
            
        if curated is not None:
            
            _query_params.append(('curated', curated))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if order_by2 is not None:
            
            _query_params.append(('order_by', order_by2))
            
        if max_complexity is not None:
            
            _query_params.append(('maxComplexity', max_complexity.value))
            
        if triangle_count_min is not None:
            
            _query_params.append(('triangleCountMin', triangle_count_min))
            
        if triangle_count_max is not None:
            
            _query_params.append(('triangleCountMax', triangle_count_max))
            
        if visibility is not None:
            
            _query_params.append(('visibility', visibility))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if page_token2 is not None:
            
            _query_params.append(('page_token', page_token2))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_size2 is not None:
            
            _query_params.append(('page_size', page_size2))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'AuthBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/users/me/assets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def icosa_api_users_get_me_likedassets(
        self,
        category: Optional[StrictStr] = None,
        curated: Optional[StrictBool] = None,
        format: Optional[List[StrictStr]] = None,
        keywords: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        tag: Optional[List[StrictStr]] = None,
        order_by: Optional[StrictStr] = None,
        order_by2: Optional[StrictStr] = None,
        max_complexity: Optional[Complexity] = None,
        triangle_count_min: Optional[StrictInt] = None,
        triangle_count_max: Optional[StrictInt] = None,
        author_name: Optional[StrictStr] = None,
        author_name2: Optional[StrictStr] = None,
        license: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        page_token2: Optional[StrictStr] = None,
        page_size: Optional[StrictStr] = None,
        page_size2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedAssetSchemaOut:
        """Get Me Likedassets


        :param category:
        :type category: str
        :param curated:
        :type curated: bool
        :param format:
        :type format: List[str]
        :param keywords:
        :type keywords: str
        :param name:
        :type name: str
        :param description:
        :type description: str
        :param tag:
        :type tag: List[str]
        :param order_by:
        :type order_by: str
        :param order_by2:
        :type order_by2: str
        :param max_complexity:
        :type max_complexity: Complexity
        :param triangle_count_min:
        :type triangle_count_min: int
        :param triangle_count_max:
        :type triangle_count_max: int
        :param author_name:
        :type author_name: str
        :param author_name2:
        :type author_name2: str
        :param license:
        :type license: str
        :param page_token:
        :type page_token: str
        :param page_token2:
        :type page_token2: str
        :param page_size:
        :type page_size: str
        :param page_size2:
        :type page_size2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_me_likedassets_serialize(
            category=category,
            curated=curated,
            format=format,
            keywords=keywords,
            name=name,
            description=description,
            tag=tag,
            order_by=order_by,
            order_by2=order_by2,
            max_complexity=max_complexity,
            triangle_count_min=triangle_count_min,
            triangle_count_max=triangle_count_max,
            author_name=author_name,
            author_name2=author_name2,
            license=license,
            page_token=page_token,
            page_token2=page_token2,
            page_size=page_size,
            page_size2=page_size2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedAssetSchemaOut",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def icosa_api_users_get_me_likedassets_with_http_info(
        self,
        category: Optional[StrictStr] = None,
        curated: Optional[StrictBool] = None,
        format: Optional[List[StrictStr]] = None,
        keywords: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        tag: Optional[List[StrictStr]] = None,
        order_by: Optional[StrictStr] = None,
        order_by2: Optional[StrictStr] = None,
        max_complexity: Optional[Complexity] = None,
        triangle_count_min: Optional[StrictInt] = None,
        triangle_count_max: Optional[StrictInt] = None,
        author_name: Optional[StrictStr] = None,
        author_name2: Optional[StrictStr] = None,
        license: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        page_token2: Optional[StrictStr] = None,
        page_size: Optional[StrictStr] = None,
        page_size2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedAssetSchemaOut]:
        """Get Me Likedassets


        :param category:
        :type category: str
        :param curated:
        :type curated: bool
        :param format:
        :type format: List[str]
        :param keywords:
        :type keywords: str
        :param name:
        :type name: str
        :param description:
        :type description: str
        :param tag:
        :type tag: List[str]
        :param order_by:
        :type order_by: str
        :param order_by2:
        :type order_by2: str
        :param max_complexity:
        :type max_complexity: Complexity
        :param triangle_count_min:
        :type triangle_count_min: int
        :param triangle_count_max:
        :type triangle_count_max: int
        :param author_name:
        :type author_name: str
        :param author_name2:
        :type author_name2: str
        :param license:
        :type license: str
        :param page_token:
        :type page_token: str
        :param page_token2:
        :type page_token2: str
        :param page_size:
        :type page_size: str
        :param page_size2:
        :type page_size2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_me_likedassets_serialize(
            category=category,
            curated=curated,
            format=format,
            keywords=keywords,
            name=name,
            description=description,
            tag=tag,
            order_by=order_by,
            order_by2=order_by2,
            max_complexity=max_complexity,
            triangle_count_min=triangle_count_min,
            triangle_count_max=triangle_count_max,
            author_name=author_name,
            author_name2=author_name2,
            license=license,
            page_token=page_token,
            page_token2=page_token2,
            page_size=page_size,
            page_size2=page_size2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedAssetSchemaOut",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def icosa_api_users_get_me_likedassets_without_preload_content(
        self,
        category: Optional[StrictStr] = None,
        curated: Optional[StrictBool] = None,
        format: Optional[List[StrictStr]] = None,
        keywords: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        tag: Optional[List[StrictStr]] = None,
        order_by: Optional[StrictStr] = None,
        order_by2: Optional[StrictStr] = None,
        max_complexity: Optional[Complexity] = None,
        triangle_count_min: Optional[StrictInt] = None,
        triangle_count_max: Optional[StrictInt] = None,
        author_name: Optional[StrictStr] = None,
        author_name2: Optional[StrictStr] = None,
        license: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        page_token2: Optional[StrictStr] = None,
        page_size: Optional[StrictStr] = None,
        page_size2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Me Likedassets


        :param category:
        :type category: str
        :param curated:
        :type curated: bool
        :param format:
        :type format: List[str]
        :param keywords:
        :type keywords: str
        :param name:
        :type name: str
        :param description:
        :type description: str
        :param tag:
        :type tag: List[str]
        :param order_by:
        :type order_by: str
        :param order_by2:
        :type order_by2: str
        :param max_complexity:
        :type max_complexity: Complexity
        :param triangle_count_min:
        :type triangle_count_min: int
        :param triangle_count_max:
        :type triangle_count_max: int
        :param author_name:
        :type author_name: str
        :param author_name2:
        :type author_name2: str
        :param license:
        :type license: str
        :param page_token:
        :type page_token: str
        :param page_token2:
        :type page_token2: str
        :param page_size:
        :type page_size: str
        :param page_size2:
        :type page_size2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_me_likedassets_serialize(
            category=category,
            curated=curated,
            format=format,
            keywords=keywords,
            name=name,
            description=description,
            tag=tag,
            order_by=order_by,
            order_by2=order_by2,
            max_complexity=max_complexity,
            triangle_count_min=triangle_count_min,
            triangle_count_max=triangle_count_max,
            author_name=author_name,
            author_name2=author_name2,
            license=license,
            page_token=page_token,
            page_token2=page_token2,
            page_size=page_size,
            page_size2=page_size2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedAssetSchemaOut",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _icosa_api_users_get_me_likedassets_serialize(
        self,
        category,
        curated,
        format,
        keywords,
        name,
        description,
        tag,
        order_by,
        order_by2,
        max_complexity,
        triangle_count_min,
        triangle_count_max,
        author_name,
        author_name2,
        license,
        page_token,
        page_token2,
        page_size,
        page_size2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'format': 'multi',
            'tag': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if category is not None:
            
            _query_params.append(('category', category))
            
        if curated is not None:
            
            _query_params.append(('curated', curated))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        if order_by2 is not None:
            
            _query_params.append(('order_by', order_by2))
            
        if max_complexity is not None:
            
            _query_params.append(('maxComplexity', max_complexity.value))
            
        if triangle_count_min is not None:
            
            _query_params.append(('triangleCountMin', triangle_count_min))
            
        if triangle_count_max is not None:
            
            _query_params.append(('triangleCountMax', triangle_count_max))
            
        if author_name is not None:
            
            _query_params.append(('authorName', author_name))
            
        if author_name2 is not None:
            
            _query_params.append(('author_name', author_name2))
            
        if license is not None:
            
            _query_params.append(('license', license))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if page_token2 is not None:
            
            _query_params.append(('page_token', page_token2))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_size2 is not None:
            
            _query_params.append(('page_size', page_size2))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'AuthBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/users/me/likedassets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def icosa_api_users_get_users_me(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FullUserSchema:
        """Get Users Me


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_users_me_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FullUserSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def icosa_api_users_get_users_me_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FullUserSchema]:
        """Get Users Me


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_users_me_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FullUserSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def icosa_api_users_get_users_me_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Users Me


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_get_users_me_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FullUserSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _icosa_api_users_get_users_me_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'AuthBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/users/me',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def icosa_api_users_update_user(
        self,
        patch_user_schema: PatchUserSchema,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FullUserSchema:
        """Update User


        :param patch_user_schema: (required)
        :type patch_user_schema: PatchUserSchema
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_update_user_serialize(
            patch_user_schema=patch_user_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FullUserSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def icosa_api_users_update_user_with_http_info(
        self,
        patch_user_schema: PatchUserSchema,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FullUserSchema]:
        """Update User


        :param patch_user_schema: (required)
        :type patch_user_schema: PatchUserSchema
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_update_user_serialize(
            patch_user_schema=patch_user_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FullUserSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def icosa_api_users_update_user_without_preload_content(
        self,
        patch_user_schema: PatchUserSchema,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update User


        :param patch_user_schema: (required)
        :type patch_user_schema: PatchUserSchema
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._icosa_api_users_update_user_serialize(
            patch_user_schema=patch_user_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FullUserSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _icosa_api_users_update_user_serialize(
        self,
        patch_user_schema,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_user_schema is not None:
            _body_params = patch_user_schema


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthBearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/users/me',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


