/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssetFormat {
    #[serde(rename = "root", deserialize_with = "Option::deserialize")]
    pub root: Option<Box<models::AssetResource>>,
    #[serde(rename = "resources", deserialize_with = "Option::deserialize")]
    pub resources: Option<Vec<models::AssetResource>>,
    #[serde(rename = "formatComplexity")]
    pub format_complexity: Box<models::FormatComplexity>,
    #[serde(rename = "formatType")]
    pub format_type: String,
}

impl AssetFormat {
    pub fn new(root: Option<models::AssetResource>, resources: Option<Vec<models::AssetResource>>, format_complexity: models::FormatComplexity, format_type: String) -> AssetFormat {
        AssetFormat {
            root: if let Some(x) = root {Some(Box::new(x))} else {None},
            resources,
            format_complexity: Box::new(format_complexity),
            format_type,
        }
    }
}

