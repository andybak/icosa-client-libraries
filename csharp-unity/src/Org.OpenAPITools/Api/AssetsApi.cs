/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>int</returns>
        int IcosaApiAssetsDeleteAsset(string asset);

        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> IcosaApiAssetsDeleteAssetWithHttpInfo(string asset);
        /// <summary>
        /// Get Asset
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>AssetSchemaOut</returns>
        AssetSchemaOut IcosaApiAssetsGetAsset(string asset);

        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>ApiResponse of AssetSchemaOut</returns>
        ApiResponse<AssetSchemaOut> IcosaApiAssetsGetAssetWithHttpInfo(string asset);
        /// <summary>
        /// Get Assets
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <returns>PagedAssetSchemaOut</returns>
        PagedAssetSchemaOut IcosaApiAssetsGetAssets(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?));

        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <returns>ApiResponse of PagedAssetSchemaOut</returns>
        ApiResponse<PagedAssetSchemaOut> IcosaApiAssetsGetAssetsWithHttpInfo(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?));
        /// <summary>
        /// Get User Asset
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <returns>AssetSchemaOut</returns>
        AssetSchemaOut IcosaApiAssetsGetUserAsset(string userurl, string asseturl);

        /// <summary>
        /// Get User Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <returns>ApiResponse of AssetSchemaOut</returns>
        ApiResponse<AssetSchemaOut> IcosaApiAssetsGetUserAssetWithHttpInfo(string userurl, string asseturl);
        /// <summary>
        /// Unpublish Asset
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>AssetSchemaOut</returns>
        AssetSchemaOut IcosaApiAssetsUnpublishAsset(int asset);

        /// <summary>
        /// Unpublish Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>ApiResponse of AssetSchemaOut</returns>
        ApiResponse<AssetSchemaOut> IcosaApiAssetsUnpublishAssetWithHttpInfo(int asset);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> IcosaApiAssetsDeleteAssetAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> IcosaApiAssetsDeleteAssetWithHttpInfoAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchemaOut</returns>
        System.Threading.Tasks.Task<AssetSchemaOut> IcosaApiAssetsGetAssetAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchemaOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetSchemaOut>> IcosaApiAssetsGetAssetWithHttpInfoAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedAssetSchemaOut</returns>
        System.Threading.Tasks.Task<PagedAssetSchemaOut> IcosaApiAssetsGetAssetsAsync(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedAssetSchemaOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedAssetSchemaOut>> IcosaApiAssetsGetAssetsWithHttpInfoAsync(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get User Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchemaOut</returns>
        System.Threading.Tasks.Task<AssetSchemaOut> IcosaApiAssetsGetUserAssetAsync(string userurl, string asseturl, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get User Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchemaOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetSchemaOut>> IcosaApiAssetsGetUserAssetWithHttpInfoAsync(string userurl, string asseturl, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unpublish Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchemaOut</returns>
        System.Threading.Tasks.Task<AssetSchemaOut> IcosaApiAssetsUnpublishAssetAsync(int asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unpublish Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchemaOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetSchemaOut>> IcosaApiAssetsUnpublishAssetWithHttpInfoAsync(int asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IDisposable, IAssetsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AssetsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AssetsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Org.OpenAPITools.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>int</returns>
        public int IcosaApiAssetsDeleteAsset(string asset)
        {
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = IcosaApiAssetsDeleteAssetWithHttpInfo(asset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>ApiResponse of int</returns>
        public Org.OpenAPITools.Client.ApiResponse<int> IcosaApiAssetsDeleteAssetWithHttpInfo(string asset)
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling AssetsApi->IcosaApiAssetsDeleteAsset");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            // authentication (AuthBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<int>("/v1/assets/{asset}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsDeleteAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> IcosaApiAssetsDeleteAssetAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = IcosaApiAssetsDeleteAssetWithHttpInfoAsync(asset, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<int>> IcosaApiAssetsDeleteAssetWithHttpInfoAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling AssetsApi->IcosaApiAssetsDeleteAsset");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            // authentication (AuthBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<int>("/v1/assets/{asset}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsDeleteAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>AssetSchemaOut</returns>
        public AssetSchemaOut IcosaApiAssetsGetAsset(string asset)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = IcosaApiAssetsGetAssetWithHttpInfo(asset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>ApiResponse of AssetSchemaOut</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> IcosaApiAssetsGetAssetWithHttpInfo(string asset)
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling AssetsApi->IcosaApiAssetsGetAsset");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetSchemaOut>("/v1/assets/{asset}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsGetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchemaOut</returns>
        public async System.Threading.Tasks.Task<AssetSchemaOut> IcosaApiAssetsGetAssetAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = IcosaApiAssetsGetAssetWithHttpInfoAsync(asset, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchemaOut)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut>> IcosaApiAssetsGetAssetWithHttpInfoAsync(string asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling AssetsApi->IcosaApiAssetsGetAsset");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AssetSchemaOut>("/v1/assets/{asset}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsGetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <returns>PagedAssetSchemaOut</returns>
        public PagedAssetSchemaOut IcosaApiAssetsGetAssets(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?))
        {
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchemaOut> localVarResponse = IcosaApiAssetsGetAssetsWithHttpInfo(category, curated, format, keywords, name, description, tag, orderBy, orderBy2, maxComplexity, triangleCountMin, triangleCountMax, authorName, authorName2, license, pageToken, pageToken2, pageSize, pageSize2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <returns>ApiResponse of PagedAssetSchemaOut</returns>
        public Org.OpenAPITools.Client.ApiResponse<PagedAssetSchemaOut> IcosaApiAssetsGetAssetsWithHttpInfo(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (curated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "curated", curated));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "format", format));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (orderBy2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy2));
            }
            if (maxComplexity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxComplexity", maxComplexity));
            }
            if (triangleCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMin", triangleCountMin));
            }
            if (triangleCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMax", triangleCountMax));
            }
            if (authorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "authorName", authorName));
            }
            if (authorName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "author_name", authorName2));
            }
            if (license != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "license", license));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (pageToken2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken2));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageSize2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize2));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PagedAssetSchemaOut>("/v1/assets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsGetAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedAssetSchemaOut</returns>
        public async System.Threading.Tasks.Task<PagedAssetSchemaOut> IcosaApiAssetsGetAssetsAsync(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = IcosaApiAssetsGetAssetsWithHttpInfoAsync(category, curated, format, keywords, name, description, tag, orderBy, orderBy2, maxComplexity, triangleCountMin, triangleCountMax, authorName, authorName2, license, pageToken, pageToken2, pageSize, pageSize2, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchemaOut> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchemaOut> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderBy2"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="authorName2"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageToken2"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="pageSize2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedAssetSchemaOut)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PagedAssetSchemaOut>> IcosaApiAssetsGetAssetsWithHttpInfoAsync(string? category = default(string?), bool? curated = default(bool?), List<string>? format = default(List<string>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), string? orderBy = default(string?), string? orderBy2 = default(string?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? authorName = default(string?), string? authorName2 = default(string?), string? license = default(string?), string? pageToken = default(string?), string? pageToken2 = default(string?), string? pageSize = default(string?), string? pageSize2 = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (curated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "curated", curated));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "format", format));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (orderBy2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy2));
            }
            if (maxComplexity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxComplexity", maxComplexity));
            }
            if (triangleCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMin", triangleCountMin));
            }
            if (triangleCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMax", triangleCountMax));
            }
            if (authorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "authorName", authorName));
            }
            if (authorName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "author_name", authorName2));
            }
            if (license != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "license", license));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (pageToken2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken2));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageSize2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize2));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PagedAssetSchemaOut>("/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsGetAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <returns>AssetSchemaOut</returns>
        public AssetSchemaOut IcosaApiAssetsGetUserAsset(string userurl, string asseturl)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = IcosaApiAssetsGetUserAssetWithHttpInfo(userurl, asseturl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <returns>ApiResponse of AssetSchemaOut</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> IcosaApiAssetsGetUserAssetWithHttpInfo(string userurl, string asseturl)
        {
            // verify the required parameter 'userurl' is set
            if (userurl == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userurl' when calling AssetsApi->IcosaApiAssetsGetUserAsset");

            // verify the required parameter 'asseturl' is set
            if (asseturl == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asseturl' when calling AssetsApi->IcosaApiAssetsGetUserAsset");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userurl", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userurl)); // path parameter
            localVarRequestOptions.PathParameters.Add("asseturl", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asseturl)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetSchemaOut>("/v1/assets/{userurl}/{asseturl}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsGetUserAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchemaOut</returns>
        public async System.Threading.Tasks.Task<AssetSchemaOut> IcosaApiAssetsGetUserAssetAsync(string userurl, string asseturl, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = IcosaApiAssetsGetUserAssetWithHttpInfoAsync(userurl, asseturl, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userurl"></param>
        /// <param name="asseturl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchemaOut)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut>> IcosaApiAssetsGetUserAssetWithHttpInfoAsync(string userurl, string asseturl, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'userurl' is set
            if (userurl == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userurl' when calling AssetsApi->IcosaApiAssetsGetUserAsset");

            // verify the required parameter 'asseturl' is set
            if (asseturl == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asseturl' when calling AssetsApi->IcosaApiAssetsGetUserAsset");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userurl", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userurl)); // path parameter
            localVarRequestOptions.PathParameters.Add("asseturl", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asseturl)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AssetSchemaOut>("/v1/assets/{userurl}/{asseturl}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsGetUserAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>AssetSchemaOut</returns>
        public AssetSchemaOut IcosaApiAssetsUnpublishAsset(int asset)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = IcosaApiAssetsUnpublishAssetWithHttpInfo(asset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <returns>ApiResponse of AssetSchemaOut</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> IcosaApiAssetsUnpublishAssetWithHttpInfo(int asset)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            // authentication (AuthBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AssetSchemaOut>("/v1/assets/{asset}/unpublish", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsUnpublishAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchemaOut</returns>
        public async System.Threading.Tasks.Task<AssetSchemaOut> IcosaApiAssetsUnpublishAssetAsync(int asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = IcosaApiAssetsUnpublishAssetWithHttpInfoAsync(asset, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = await task.ConfigureAwait(false);
#else
            Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchemaOut)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetSchemaOut>> IcosaApiAssetsUnpublishAssetWithHttpInfoAsync(int asset, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            // authentication (AuthBearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<AssetSchemaOut>("/v1/assets/{asset}/unpublish", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiAssetsUnpublishAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
